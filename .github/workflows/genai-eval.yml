name: "GenAI Model Evaluation"

on:
  workflow_dispatch:
  workflow_call:
  push:
    branches:
      - main
    paths:
      - 'data/genai-eval-data.jsonl'
      - 'configs/genai-eval-config.json'
      - '.github/workflows/genai-eval.yml'

permissions:
  id-token: write
  contents: read

jobs:
  run-genai-evaluation:
    runs-on: ubuntu-latest
    env:
      GENAI_EVALS_CONFIG_PATH: ${{ github.workspace }}/configs/genai-eval-config-temp.json
      GENAI_EVALS_DATA_PATH: ${{ github.workspace }}/data/genai-eval-data.jsonl

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login using Federated Credentials
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Display Configuration
        run: |
          echo "üîç Evaluation Configuration:"
          echo "   Config Path: ${{ env.GENAI_EVALS_CONFIG_PATH }}"
          echo "   Data Path: ${{ env.GENAI_EVALS_DATA_PATH }}"
          echo "   Azure OpenAI Endpoint: ${{ vars.AZURE_OPENAI_ENDPOINT }}"
          echo "   Deployment: ${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT }}"

      - name: Validate Data File
        run: |
          if [ ! -f "${{ env.GENAI_EVALS_DATA_PATH }}" ]; then
            echo "‚ùå Error: Data file not found at ${{ env.GENAI_EVALS_DATA_PATH }}"
            exit 1
          fi
          
          # Count lines
          line_count=$(wc -l < "${{ env.GENAI_EVALS_DATA_PATH }}")
          echo "‚úÖ Found $line_count test cases in data file"
          
          # Validate JSON format of first line
          first_line=$(head -n 1 "${{ env.GENAI_EVALS_DATA_PATH }}")
          if ! echo "$first_line" | jq empty 2>/dev/null; then
            echo "‚ùå Error: Invalid JSON format in data file"
            exit 1
          fi
          echo "‚úÖ Data file format validated"

      - name: Create Evaluation Configuration
        run: |
          cat > ${{ env.GENAI_EVALS_CONFIG_PATH }} <<EOF
          {
            "data": "${{ env.GENAI_EVALS_DATA_PATH }}",
            "evaluators": {
              "coherence": "CoherenceEvaluator",
              "fluency": "FluencyEvaluator",
              "groundedness": "GroundednessEvaluator",
              "relevance": "RelevanceEvaluator"
            },
            "ai_model_configuration": {
              "type": "azure_openai",
              "azure_endpoint": "${{ vars.AZURE_OPENAI_ENDPOINT }}",
              "azure_deployment": "${{ vars.AZURE_OPENAI_CHAT_DEPLOYMENT }}",
              "api_key": "${{ secrets.AZURE_OPENAI_API_KEY }}",
              "api_version": "${{ vars.AZURE_OPENAI_API_VERSION }}"
            }
          }
          EOF
          
          echo "‚úÖ Evaluation configuration file created"
          echo "Configuration contents:"
          cat ${{ env.GENAI_EVALS_CONFIG_PATH }} | jq .

      - name: Run GenAI Evaluation
        id: run-genai-evaluation
        uses: microsoft/genai-evals@main
        with:
          evaluate-configuration: ${{ env.GENAI_EVALS_CONFIG_PATH }}

      - name: Evaluation Complete
        if: success()
        run: |
          echo "‚úÖ Evaluation completed successfully!"
          echo "üìä View results in the Actions summary above"
          echo ""
          echo "Results include:"
          echo "  - Test Variants: Summary of test configurations"
          echo "  - Average Scores: Mean scores across all evaluators"
          echo "  - Individual Scores: Detailed results for each test case"

      - name: Evaluation Failed
        if: failure()
        run: |
          echo "‚ùå Evaluation failed!"
          echo "Please check the logs above for error details"
          echo ""
          echo "Common issues:"
          echo "  - Invalid Azure OpenAI credentials"
          echo "  - Incorrect deployment name"
          echo "  - Invalid data format (must be JSONL)"
          echo "  - Missing required fields in data (query, response)"
          echo "  - API rate limits exceeded"

      - name: Cleanup
        if: always()
        run: |
          # Remove temporary config file with API key
          if [ -f "${{ env.GENAI_EVALS_CONFIG_PATH }}" ]; then
            rm ${{ env.GENAI_EVALS_CONFIG_PATH }}
            echo "üßπ Cleaned up temporary configuration file"
          fi
